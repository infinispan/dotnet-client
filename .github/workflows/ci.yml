name: infinispan-netcore-tests
env:
  ISPN_VER: "13.0.10.Final"
  cppTag: "0.1.3.Dev1"
  CLIENT_VERSION: ${{ github.event.release.tag_name }}
on:
  push:
    tags:
      - "*"
jobs:
  run-ci-tests-win:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - run: echo $GITHUB_REF_NAME
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      #        with:
      #          vs-version: "[17.0,17.2)"
      - name: Cache Protobuf
        id: cache-protobuf
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\libs
          key: cache-protobuf
      - name: Build Protobuf
        shell: cmd
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}
          git clone -b v3.5.0 https://github.com/protocolbuffers/protobuf.git
          mkdir libs
          cd protobuf
          mkdir build && cd build
          cmake -G "Visual Studio 17 2022" -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\libs -Dprotobuf_BUILD_TESTS=OFF ${{ github.workspace }}\protobuf\cmake
          cmake --build . --config Release --target install
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x" # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: "x64" # optional x64 or x86. Defaults to x64 if not specified
      - name: Cache C++
        id: cache-cpp
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}\cpp-client\build_win\_CPack_Packages\WIN-x86_64\ZIP
            ${{ github.workspace }}\cpp-client\infinispan-server-13.0.10.Final
          key: cache-cpp-${{ github.ref_name }}
      - name: Build C++
        shell: cmd
        if: steps.cache-cpp.outputs.cache-hit != 'true'
        run: |
          echo '::echo::on'
          where swig
          where mvn
          where java
          dir C:\ProgramData\Chocolatey\tools
          set generator="Visual Studio 17 2022"
          set SWIG_DIR=C:\ProgramData\Chocolatey\bin
          set SWIG_EXECUTABLE=C:\ProgramData\Chocolatey\bin\swig.exe
          set MVN_PROGRAM=C:\ProgramData\chocolatey\lib\maven\apache-maven-3.8.6\bin\mvn
          set PROTOBUF_LIBRARY=${{ github.workspace }}\libs\lib\libprotobuf.lib
          set PROTOBUF_PROTOC_EXECUTABLE=${{ github.workspace }}\libs\bin\protoc.exe
          set PROTOBUF_PROTOC_LIBRARY=${{ github.workspace }}\libs\lib\libprotoc.lib
          set PROTOBUF_INCLUDE_DIR=${{ github.workspace }}\libs\include
          set INFINISPAN_VERSION=11.0.9.Final
          set cppTag=%GITHUB_REF_NAME%
          set CLIENT_VERSION=%GITHUB_REF_NAME%
          git clone -b %cppTag% https://github.com/infinispan/cpp-client.git
          cd cpp-client
          set buildTest=skip
          build.bat
      - name: Strong Names Setup
        shell: pwsh
        env:
          SECRET_DATA1: ${{ secrets.STRONG_NAMES_KEY }}
        run: |
          $Base64String = $env:SECRET_DATA1
          $StrongNamesKey = "strongNames.key"
          [byte[]]$Bytes = [convert]::FromBase64String($Base64String)
          [System.IO.File]::WriteAllBytes($StrongNamesKey,$Bytes)
      - uses: nuget/setup-nuget@v1
      - name: Build C#
        shell: cmd
        run: |
          echo '::echo::on'
          where swig
          where mvn
          where java
          dir
          set generator="Visual Studio 17 2022"
          set checkoutDir=${{ github.workspace }}
          set INFINISPAN_VERSION=13.0.10.Final
          set JBOSS_HOME=${{ github.workspace }}\cpp-client\infinispan-server-11.0.9.Final
          set PROTOBUF_LIBRARY=${{ github.workspace }}\libs\lib\libprotobuf.lib
          set PROTOBUF_PROTOC_EXECUTABLE=${{ github.workspace }}\libs\bin\protoc.exe
          set PROTOBUF_PROTOC_LIBRARY=${{ github.workspace }}\libs\lib\libprotoc.lib
          set PROTOBUF_INCLUDE_DIR=${{ github.workspace }}\protobuf\src
          set HOTROD_SNK=${{ github.workspace }}\strongNames.key
          mkdir nupkg
          nuget install NLog -Version 2.1.0 -OutputDirectory nupkg
          set NLOG_DLL=${{ github.workspace }}\nupkg\NLog.2.1.0\lib\net40\NLog.dll
          nuget install NUnit -Version 3.8.0 -OutputDirectory nupkg
          set NUNIT_DLL=${{ github.workspace }}\nupkg\NUnit.3.8.0\lib\net45\nunit.framework.dll
          set NLOG_LICENSE=${{ github.workspace }}\License.txt
          nuget install NUnit.ConsoleRunner -Version 3.8.0 -OutputDirectory nupkg
          set PATH=%PATH%;${{ github.workspace }}\nupkg\Nunit.ConsoleRunner.3.8.0\tools
          nuget install Google.Protobuf.Tools -Version 3.4.0 -OutputDirectory nupkg
          nuget install Google.Protobuf -Version 3.4.0 -OutputDirectory nupkg
          set PROTOBUF_PROTOC_EXECUTABLE_CS=${{ github.workspace }}\nupkg\Google.Protobuf.Tools.3.4.0\tools\windows_x64\protoc.exe
          set GOOGLE_PROTOBUF_NUPKG=${{ github.workspace }}\nupkg
          nuget install swigwin -Version 3.0.9 -OutputDirectory nupkg
          set SWIG_DIR=${{ github.workspace }}\nupkg\swigwin.3.0.9\tools\swigwin-3.0.9\Lib
          set SWIG_EXECUTABLE=${{ github.workspace }}\nupkg\swigwin.3.0.9\tools\swigwin-3.0.9\swig.exe
          set CLIENT_VERSION=%GITHUB_REF_NAME%
          set packNuget=true
          build.bat
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "build_windows/*.msi,build_windows/*.nupkg"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
