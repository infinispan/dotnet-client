using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit.Framework;
using Infinispan.HotRod.Impl;
using Infinispan.HotRod.Config;
using Infinispan.HotRod;
using System.Diagnostics;
using System.IO;

namespace Infinispan.HotRod.Tests.Util
{
    class HotRodServer
    {
        public const string hostname = "127.0.0.1";
        public const int port = 11222;
        string configurationFile;
        private Process hrServer;

        public HotRodServer(string configurationFile)
        {
            this.configurationFile = configurationFile;
        }

        public void StartHotRodServer()
        {
            try
            {
                Console.WriteLine("Starting Infinispan Server ...");
                StartHotrodServerInternal();
            }
            catch (Exception ex)
            {
                ShutDownHotrodServer();
                Console.WriteLine(ex.StackTrace);
                throw ex;
            }
        }

        void StartHotrodServerInternal()
        {
            string jbossHome = System.Environment.GetEnvironmentVariable("JBOSS_HOME");
            if (jbossHome == null)
            {
                throw new Exception("JBOSS_HOME env variable not set.");
            }

            Assert.IsTrue(PortProbe.IsPortClosed(hostname, port, millisTimeout: 10000),
                          "Another process already listening on the same ip/port.");

            hrServer = new Process();
            hrServer.StartInfo.FileName = buildStartCommand(jbossHome);
            hrServer.StartInfo.Arguments = "-c " + configurationFile;
            hrServer.StartInfo.UseShellExecute = false;
            if (PlatformUtils.isUnix())
            {
                // Drop the output generated by the server on the console (data present in log file).
                hrServer.StartInfo.RedirectStandardOutput = true;
                hrServer.StartInfo.RedirectStandardError = true;
                hrServer.OutputDataReceived += new DataReceivedEventHandler(DropOutputHandler);
                hrServer.ErrorDataReceived += new DataReceivedEventHandler(DropOutputHandler);
            }
            hrServer.Start();

            Assert.IsTrue(PortProbe.IsPortOpen(hostname, port),
                          "Server not listening on the expected ip/port.");
        }

        public void ShutDownHotrodServer()
        {
            Console.WriteLine("Shutting down Infinispan Server ...");
            if (hrServer != null)
            {
                PlatformUtils.killServer(hrServer);

                Assert.IsTrue(PortProbe.IsPortClosed(hostname, port, millisTimeout: 10000),
                              "A process is still listening on the ip/port. Kill failed?");
            }
        }

        private string buildStartCommand(string homePath)
        {
            if (PlatformUtils.isUnix())
            {
                return Path.Combine(homePath, "bin/standalone.sh");
            }
            else
            {
                return Path.Combine(homePath, "bin\\standalone.bat");
            }
        }

        private static void DropOutputHandler(object sendingProcess, DataReceivedEventArgs outLine)
        {
            // Do nothing. Drop the data.
        }
    }
}
